/*
 * generated by Xtext 2.14.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package fr.unice.polytech.robotproject.xtextdsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package fr.unice.polytech.robotproject.xtextdsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import fr.unice.polytech.robotproject.xtextdsl.services.MyDslGrammarAccess;

}
@parser::members {
	private MyDslGrammarAccess grammarAccess;

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleRobot
entryRuleRobot
:
{ before(grammarAccess.getRobotRule()); }
	 ruleRobot
{ after(grammarAccess.getRobotRule()); } 
	 EOF 
;

// Rule Robot
ruleRobot 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRobotAccess().getGroup()); }
		(rule__Robot__Group__0)
		{ after(grammarAccess.getRobotAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInstruction
entryRuleInstruction
:
{ before(grammarAccess.getInstructionRule()); }
	 ruleInstruction
{ after(grammarAccess.getInstructionRule()); } 
	 EOF 
;

// Rule Instruction
ruleInstruction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInstructionAccess().getAlternatives()); }
		(rule__Instruction__Alternatives)
		{ after(grammarAccess.getInstructionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInstructionBlock
entryRuleInstructionBlock
:
{ before(grammarAccess.getInstructionBlockRule()); }
	 ruleInstructionBlock
{ after(grammarAccess.getInstructionBlockRule()); } 
	 EOF 
;

// Rule InstructionBlock
ruleInstructionBlock 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInstructionBlockAccess().getGroup()); }
		(rule__InstructionBlock__Group__0)
		{ after(grammarAccess.getInstructionBlockAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunction
entryRuleFunction
:
{ before(grammarAccess.getFunctionRule()); }
	 ruleFunction
{ after(grammarAccess.getFunctionRule()); } 
	 EOF 
;

// Rule Function
ruleFunction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionAccess().getGroup()); }
		(rule__Function__Group__0)
		{ after(grammarAccess.getFunctionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIf
entryRuleIf
:
{ before(grammarAccess.getIfRule()); }
	 ruleIf
{ after(grammarAccess.getIfRule()); } 
	 EOF 
;

// Rule If
ruleIf 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIfAccess().getGroup()); }
		(rule__If__Group__0)
		{ after(grammarAccess.getIfAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRelease
entryRuleRelease
:
{ before(grammarAccess.getReleaseRule()); }
	 ruleRelease
{ after(grammarAccess.getReleaseRule()); } 
	 EOF 
;

// Rule Release
ruleRelease 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getReleaseAccess().getGroup()); }
		(rule__Release__Group__0)
		{ after(grammarAccess.getReleaseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGrab
entryRuleGrab
:
{ before(grammarAccess.getGrabRule()); }
	 ruleGrab
{ after(grammarAccess.getGrabRule()); } 
	 EOF 
;

// Rule Grab
ruleGrab 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGrabAccess().getGroup()); }
		(rule__Grab__Group__0)
		{ after(grammarAccess.getGrabAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTimedInstruction
entryRuleTimedInstruction
:
{ before(grammarAccess.getTimedInstructionRule()); }
	 ruleTimedInstruction
{ after(grammarAccess.getTimedInstructionRule()); } 
	 EOF 
;

// Rule TimedInstruction
ruleTimedInstruction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTimedInstructionAccess().getAlternatives()); }
		(rule__TimedInstruction__Alternatives)
		{ after(grammarAccess.getTimedInstructionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMoveStraight
entryRuleMoveStraight
:
{ before(grammarAccess.getMoveStraightRule()); }
	 ruleMoveStraight
{ after(grammarAccess.getMoveStraightRule()); } 
	 EOF 
;

// Rule MoveStraight
ruleMoveStraight 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMoveStraightAccess().getGroup()); }
		(rule__MoveStraight__Group__0)
		{ after(grammarAccess.getMoveStraightAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWait
entryRuleWait
:
{ before(grammarAccess.getWaitRule()); }
	 ruleWait
{ after(grammarAccess.getWaitRule()); } 
	 EOF 
;

// Rule Wait
ruleWait 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWaitAccess().getGroup()); }
		(rule__Wait__Group__0)
		{ after(grammarAccess.getWaitAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTurn
entryRuleTurn
:
{ before(grammarAccess.getTurnRule()); }
	 ruleTurn
{ after(grammarAccess.getTurnRule()); } 
	 EOF 
;

// Rule Turn
ruleTurn 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTurnAccess().getGroup()); }
		(rule__Turn__Group__0)
		{ after(grammarAccess.getTurnAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDistance
entryRuleDistance
:
{ before(grammarAccess.getDistanceRule()); }
	 ruleDistance
{ after(grammarAccess.getDistanceRule()); } 
	 EOF 
;

// Rule Distance
ruleDistance 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDistanceAccess().getGroup()); }
		(rule__Distance__Group__0)
		{ after(grammarAccess.getDistanceAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAngle
entryRuleAngle
:
{ before(grammarAccess.getAngleRule()); }
	 ruleAngle
{ after(grammarAccess.getAngleRule()); } 
	 EOF 
;

// Rule Angle
ruleAngle 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAngleAccess().getGroup()); }
		(rule__Angle__Group__0)
		{ after(grammarAccess.getAngleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDuration
entryRuleDuration
:
{ before(grammarAccess.getDurationRule()); }
	 ruleDuration
{ after(grammarAccess.getDurationRule()); } 
	 EOF 
;

// Rule Duration
ruleDuration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDurationAccess().getGroup()); }
		(rule__Duration__Group__0)
		{ after(grammarAccess.getDurationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEInt
entryRuleEInt
:
{ before(grammarAccess.getEIntRule()); }
	 ruleEInt
{ after(grammarAccess.getEIntRule()); } 
	 EOF 
;

// Rule EInt
ruleEInt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEIntAccess().getGroup()); }
		(rule__EInt__Group__0)
		{ after(grammarAccess.getEIntAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCall
entryRuleCall
:
{ before(grammarAccess.getCallRule()); }
	 ruleCall
{ after(grammarAccess.getCallRule()); } 
	 EOF 
;

// Rule Call
ruleCall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCallAccess().getGroup()); }
		(rule__Call__Group__0)
		{ after(grammarAccess.getCallAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCondition
entryRuleCondition
:
{ before(grammarAccess.getConditionRule()); }
	 ruleCondition
{ after(grammarAccess.getConditionRule()); } 
	 EOF 
;

// Rule Condition
ruleCondition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionAccess().getSensorActivationParserRuleCall()); }
		ruleSensorActivation
		{ after(grammarAccess.getConditionAccess().getSensorActivationParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSensorActivation
entryRuleSensorActivation
:
{ before(grammarAccess.getSensorActivationRule()); }
	 ruleSensorActivation
{ after(grammarAccess.getSensorActivationRule()); } 
	 EOF 
;

// Rule SensorActivation
ruleSensorActivation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSensorActivationAccess().getGroup()); }
		(rule__SensorActivation__Group__0)
		{ after(grammarAccess.getSensorActivationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEString
entryRuleEString
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEStringAccess().getAlternatives()); }
		(rule__EString__Alternatives)
		{ after(grammarAccess.getEStringAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule TimeUnit
ruleTimeUnit
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTimeUnitAccess().getAlternatives()); }
		(rule__TimeUnit__Alternatives)
		{ after(grammarAccess.getTimeUnitAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule DistanceUnit
ruleDistanceUnit
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDistanceUnitAccess().getCENTIMETERSEnumLiteralDeclaration()); }
		('cm')
		{ after(grammarAccess.getDistanceUnitAccess().getCENTIMETERSEnumLiteralDeclaration()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule AngleUnit
ruleAngleUnit
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAngleUnitAccess().getDEGREESEnumLiteralDeclaration()); }
		('deg')
		{ after(grammarAccess.getAngleUnitAccess().getDEGREESEnumLiteralDeclaration()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInstructionAccess().getTimedInstructionParserRuleCall_0()); }
		ruleTimedInstruction
		{ after(grammarAccess.getInstructionAccess().getTimedInstructionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getGrabParserRuleCall_1()); }
		ruleGrab
		{ after(grammarAccess.getInstructionAccess().getGrabParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getReleaseParserRuleCall_2()); }
		ruleRelease
		{ after(grammarAccess.getInstructionAccess().getReleaseParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getInstructionBlockParserRuleCall_3()); }
		ruleInstructionBlock
		{ after(grammarAccess.getInstructionAccess().getInstructionBlockParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getCallParserRuleCall_4()); }
		ruleCall
		{ after(grammarAccess.getInstructionAccess().getCallParserRuleCall_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InstructionBlock__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInstructionBlockAccess().getIfParserRuleCall_0_0()); }
		ruleIf
		{ after(grammarAccess.getInstructionBlockAccess().getIfParserRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionBlockAccess().getFunctionParserRuleCall_0_1()); }
		ruleFunction
		{ after(grammarAccess.getInstructionBlockAccess().getFunctionParserRuleCall_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimedInstruction__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTimedInstructionAccess().getMoveStraightParserRuleCall_0()); }
		ruleMoveStraight
		{ after(grammarAccess.getTimedInstructionAccess().getMoveStraightParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getTimedInstructionAccess().getTurnParserRuleCall_1()); }
		ruleTurn
		{ after(grammarAccess.getTimedInstructionAccess().getTurnParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getTimedInstructionAccess().getWaitParserRuleCall_2()); }
		ruleWait
		{ after(grammarAccess.getTimedInstructionAccess().getWaitParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
		RULE_ID
		{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeUnit__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTimeUnitAccess().getMILLISECONDSEnumLiteralDeclaration_0()); }
		('ms')
		{ after(grammarAccess.getTimeUnitAccess().getMILLISECONDSEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getTimeUnitAccess().getSECONDSEnumLiteralDeclaration_1()); }
		('s')
		{ after(grammarAccess.getTimeUnitAccess().getSECONDSEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Robot__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Robot__Group__0__Impl
	rule__Robot__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Robot__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRobotAccess().getRobotAction_0()); }
	()
	{ after(grammarAccess.getRobotAccess().getRobotAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Robot__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Robot__Group__1__Impl
	rule__Robot__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Robot__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRobotAccess().getRobotKeyword_1()); }
	'Robot'
	{ after(grammarAccess.getRobotAccess().getRobotKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Robot__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Robot__Group__2__Impl
	rule__Robot__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Robot__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRobotAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getRobotAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Robot__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Robot__Group__3__Impl
	rule__Robot__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Robot__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRobotAccess().getGroup_3()); }
	(rule__Robot__Group_3__0)?
	{ after(grammarAccess.getRobotAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Robot__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Robot__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Robot__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRobotAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getRobotAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Robot__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Robot__Group_3__0__Impl
	rule__Robot__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Robot__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRobotAccess().getInstructionsAssignment_3_0()); }
	(rule__Robot__InstructionsAssignment_3_0)
	{ after(grammarAccess.getRobotAccess().getInstructionsAssignment_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Robot__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Robot__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Robot__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRobotAccess().getInstructionsAssignment_3_1()); }
	(rule__Robot__InstructionsAssignment_3_1)*
	{ after(grammarAccess.getRobotAccess().getInstructionsAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__InstructionBlock__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InstructionBlock__Group__0__Impl
	rule__InstructionBlock__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InstructionBlock__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstructionBlockAccess().getAlternatives_0()); }
	(rule__InstructionBlock__Alternatives_0)
	{ after(grammarAccess.getInstructionBlockAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InstructionBlock__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InstructionBlock__Group__1__Impl
	rule__InstructionBlock__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InstructionBlock__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstructionBlockAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getInstructionBlockAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InstructionBlock__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InstructionBlock__Group__2__Impl
	rule__InstructionBlock__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__InstructionBlock__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstructionBlockAccess().getGroup_2()); }
	(rule__InstructionBlock__Group_2__0)?
	{ after(grammarAccess.getInstructionBlockAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InstructionBlock__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InstructionBlock__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InstructionBlock__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstructionBlockAccess().getRightCurlyBracketKeyword_3()); }
	'}'
	{ after(grammarAccess.getInstructionBlockAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__InstructionBlock__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InstructionBlock__Group_2__0__Impl
	rule__InstructionBlock__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InstructionBlock__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstructionBlockAccess().getInstructionsAssignment_2_0()); }
	(rule__InstructionBlock__InstructionsAssignment_2_0)
	{ after(grammarAccess.getInstructionBlockAccess().getInstructionsAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InstructionBlock__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InstructionBlock__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InstructionBlock__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstructionBlockAccess().getInstructionsAssignment_2_1()); }
	(rule__InstructionBlock__InstructionsAssignment_2_1)*
	{ after(grammarAccess.getInstructionBlockAccess().getInstructionsAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__0__Impl
	rule__Function__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getFunctionKeyword_0()); }
	'function'
	{ after(grammarAccess.getFunctionAccess().getFunctionKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getNameAssignment_1()); }
	(rule__Function__NameAssignment_1)
	{ after(grammarAccess.getFunctionAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__0__Impl
	rule__If__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getIfAction_0()); }
	()
	{ after(grammarAccess.getIfAccess().getIfAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__1__Impl
	rule__If__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getIfKeyword_1()); }
	'if'
	{ after(grammarAccess.getIfAccess().getIfKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getConditionAssignment_2()); }
	(rule__If__ConditionAssignment_2)?
	{ after(grammarAccess.getIfAccess().getConditionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Release__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Release__Group__0__Impl
	rule__Release__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Release__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReleaseAccess().getReleaseAction_0()); }
	()
	{ after(grammarAccess.getReleaseAccess().getReleaseAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Release__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Release__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Release__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReleaseAccess().getReleaseKeyword_1()); }
	'release'
	{ after(grammarAccess.getReleaseAccess().getReleaseKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Grab__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Grab__Group__0__Impl
	rule__Grab__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Grab__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGrabAccess().getGrabAction_0()); }
	()
	{ after(grammarAccess.getGrabAccess().getGrabAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Grab__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Grab__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Grab__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGrabAccess().getGrabKeyword_1()); }
	'grab'
	{ after(grammarAccess.getGrabAccess().getGrabKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MoveStraight__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MoveStraight__Group__0__Impl
	rule__MoveStraight__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveStraight__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveStraightAccess().getMoveStraightKeyword_0()); }
	'moveStraight'
	{ after(grammarAccess.getMoveStraightAccess().getMoveStraightKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveStraight__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MoveStraight__Group__1__Impl
	rule__MoveStraight__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveStraight__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveStraightAccess().getDistanceAssignment_1()); }
	(rule__MoveStraight__DistanceAssignment_1)
	{ after(grammarAccess.getMoveStraightAccess().getDistanceAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveStraight__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MoveStraight__Group__2__Impl
	rule__MoveStraight__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveStraight__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveStraightAccess().getInKeyword_2()); }
	'in'
	{ after(grammarAccess.getMoveStraightAccess().getInKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveStraight__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MoveStraight__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveStraight__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveStraightAccess().getDurationAssignment_3()); }
	(rule__MoveStraight__DurationAssignment_3)?
	{ after(grammarAccess.getMoveStraightAccess().getDurationAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Wait__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Wait__Group__0__Impl
	rule__Wait__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Wait__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWaitAccess().getWaitAction_0()); }
	()
	{ after(grammarAccess.getWaitAccess().getWaitAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Wait__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Wait__Group__1__Impl
	rule__Wait__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Wait__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWaitAccess().getWaitKeyword_1()); }
	'wait'
	{ after(grammarAccess.getWaitAccess().getWaitKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Wait__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Wait__Group__2__Impl
	rule__Wait__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Wait__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWaitAccess().getForKeyword_2()); }
	'for'
	{ after(grammarAccess.getWaitAccess().getForKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Wait__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Wait__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Wait__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWaitAccess().getDurationAssignment_3()); }
	(rule__Wait__DurationAssignment_3)?
	{ after(grammarAccess.getWaitAccess().getDurationAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Turn__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Turn__Group__0__Impl
	rule__Turn__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Turn__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTurnAccess().getTurnKeyword_0()); }
	'turn'
	{ after(grammarAccess.getTurnAccess().getTurnKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Turn__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Turn__Group__1__Impl
	rule__Turn__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Turn__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTurnAccess().getAngleAssignment_1()); }
	(rule__Turn__AngleAssignment_1)
	{ after(grammarAccess.getTurnAccess().getAngleAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Turn__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Turn__Group__2__Impl
	rule__Turn__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Turn__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTurnAccess().getInKeyword_2()); }
	'in'
	{ after(grammarAccess.getTurnAccess().getInKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Turn__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Turn__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Turn__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTurnAccess().getDurationAssignment_3()); }
	(rule__Turn__DurationAssignment_3)?
	{ after(grammarAccess.getTurnAccess().getDurationAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Distance__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Distance__Group__0__Impl
	rule__Distance__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Distance__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDistanceAccess().getValueAssignment_0()); }
	(rule__Distance__ValueAssignment_0)
	{ after(grammarAccess.getDistanceAccess().getValueAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Distance__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Distance__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Distance__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDistanceAccess().getDistanceUnitAssignment_1()); }
	(rule__Distance__DistanceUnitAssignment_1)
	{ after(grammarAccess.getDistanceAccess().getDistanceUnitAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Angle__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Angle__Group__0__Impl
	rule__Angle__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Angle__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAngleAccess().getValueAssignment_0()); }
	(rule__Angle__ValueAssignment_0)
	{ after(grammarAccess.getAngleAccess().getValueAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Angle__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Angle__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Angle__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAngleAccess().getAngleUnitAssignment_1()); }
	(rule__Angle__AngleUnitAssignment_1)?
	{ after(grammarAccess.getAngleAccess().getAngleUnitAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Duration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Duration__Group__0__Impl
	rule__Duration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Duration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDurationAccess().getValueAssignment_0()); }
	(rule__Duration__ValueAssignment_0)
	{ after(grammarAccess.getDurationAccess().getValueAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Duration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Duration__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Duration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDurationAccess().getTimeUnitAssignment_1()); }
	(rule__Duration__TimeUnitAssignment_1)
	{ after(grammarAccess.getDurationAccess().getTimeUnitAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EInt__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EInt__Group__0__Impl
	rule__EInt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
	('-')?
	{ after(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EInt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
	{ after(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Call__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Call__Group__0__Impl
	rule__Call__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCallAccess().getCallKeyword_0()); }
	'call'
	{ after(grammarAccess.getCallAccess().getCallKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Call__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCallAccess().getDestinationAssignment_1()); }
	(rule__Call__DestinationAssignment_1)
	{ after(grammarAccess.getCallAccess().getDestinationAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SensorActivation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SensorActivation__Group__0__Impl
	rule__SensorActivation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorActivation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorActivationAccess().getSensorActivationAction_0()); }
	()
	{ after(grammarAccess.getSensorActivationAccess().getSensorActivationAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorActivation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SensorActivation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorActivation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorActivationAccess().getSensorActivatedKeyword_1()); }
	'sensorActivated'
	{ after(grammarAccess.getSensorActivationAccess().getSensorActivatedKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Robot__InstructionsAssignment_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRobotAccess().getInstructionsInstructionParserRuleCall_3_0_0()); }
		ruleInstruction
		{ after(grammarAccess.getRobotAccess().getInstructionsInstructionParserRuleCall_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Robot__InstructionsAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRobotAccess().getInstructionsInstructionParserRuleCall_3_1_0()); }
		ruleInstruction
		{ after(grammarAccess.getRobotAccess().getInstructionsInstructionParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InstructionBlock__InstructionsAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInstructionBlockAccess().getInstructionsInstructionParserRuleCall_2_0_0()); }
		ruleInstruction
		{ after(grammarAccess.getInstructionBlockAccess().getInstructionsInstructionParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InstructionBlock__InstructionsAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInstructionBlockAccess().getInstructionsInstructionParserRuleCall_2_1_0()); }
		ruleInstruction
		{ after(grammarAccess.getInstructionBlockAccess().getInstructionsInstructionParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getNameEStringParserRuleCall_1_0()); }
		ruleEString
		{ after(grammarAccess.getFunctionAccess().getNameEStringParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__ConditionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfAccess().getConditionConditionParserRuleCall_2_0()); }
		ruleCondition
		{ after(grammarAccess.getIfAccess().getConditionConditionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveStraight__DistanceAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMoveStraightAccess().getDistanceDistanceParserRuleCall_1_0()); }
		ruleDistance
		{ after(grammarAccess.getMoveStraightAccess().getDistanceDistanceParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveStraight__DurationAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMoveStraightAccess().getDurationDurationParserRuleCall_3_0()); }
		ruleDuration
		{ after(grammarAccess.getMoveStraightAccess().getDurationDurationParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Wait__DurationAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWaitAccess().getDurationDurationParserRuleCall_3_0()); }
		ruleDuration
		{ after(grammarAccess.getWaitAccess().getDurationDurationParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Turn__AngleAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTurnAccess().getAngleAngleParserRuleCall_1_0()); }
		ruleAngle
		{ after(grammarAccess.getTurnAccess().getAngleAngleParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Turn__DurationAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTurnAccess().getDurationDurationParserRuleCall_3_0()); }
		ruleDuration
		{ after(grammarAccess.getTurnAccess().getDurationDurationParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Distance__ValueAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDistanceAccess().getValueEIntParserRuleCall_0_0()); }
		ruleEInt
		{ after(grammarAccess.getDistanceAccess().getValueEIntParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Distance__DistanceUnitAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDistanceAccess().getDistanceUnitDistanceUnitEnumRuleCall_1_0()); }
		ruleDistanceUnit
		{ after(grammarAccess.getDistanceAccess().getDistanceUnitDistanceUnitEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Angle__ValueAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAngleAccess().getValueEIntParserRuleCall_0_0()); }
		ruleEInt
		{ after(grammarAccess.getAngleAccess().getValueEIntParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Angle__AngleUnitAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAngleAccess().getAngleUnitAngleUnitEnumRuleCall_1_0()); }
		ruleAngleUnit
		{ after(grammarAccess.getAngleAccess().getAngleUnitAngleUnitEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Duration__ValueAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDurationAccess().getValueEIntParserRuleCall_0_0()); }
		ruleEInt
		{ after(grammarAccess.getDurationAccess().getValueEIntParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Duration__TimeUnitAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDurationAccess().getTimeUnitTimeUnitEnumRuleCall_1_0()); }
		ruleTimeUnit
		{ after(grammarAccess.getDurationAccess().getTimeUnitTimeUnitEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__DestinationAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCallAccess().getDestinationFunctionCrossReference_1_0()); }
		(
			{ before(grammarAccess.getCallAccess().getDestinationFunctionEStringParserRuleCall_1_0_1()); }
			ruleEString
			{ after(grammarAccess.getCallAccess().getDestinationFunctionEStringParserRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getCallAccess().getDestinationFunctionCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
