/*
 * generated by Xtext 2.14.0
 */
package fr.unice.polytech.robotproject.xtextdsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class RobotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.robotproject.xtextdsl.MyDsl.Robot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRobotAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRobotKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cInstructionsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cInstructionsInstructionParserRuleCall_3_0_0 = (RuleCall)cInstructionsAssignment_3_0.eContents().get(0);
		private final Assignment cInstructionsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cInstructionsInstructionParserRuleCall_3_1_0 = (RuleCall)cInstructionsAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Robot:
		//	{Robot}
		//	'Robot'
		//	'{' (instructions+=Instruction instructions+=Instruction*)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Robot} 'Robot' '{' (instructions+=Instruction instructions+=Instruction*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{Robot}
		public Action getRobotAction_0() { return cRobotAction_0; }
		
		//'Robot'
		public Keyword getRobotKeyword_1() { return cRobotKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(instructions+=Instruction instructions+=Instruction*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//instructions+=Instruction
		public Assignment getInstructionsAssignment_3_0() { return cInstructionsAssignment_3_0; }
		
		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_3_0_0() { return cInstructionsInstructionParserRuleCall_3_0_0; }
		
		//instructions+=Instruction*
		public Assignment getInstructionsAssignment_3_1() { return cInstructionsAssignment_3_1; }
		
		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_3_1_0() { return cInstructionsInstructionParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.robotproject.xtextdsl.MyDsl.Instruction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrintParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTimedInstructionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cGrabParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cReleaseParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFunctionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cCallParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cIfParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Instruction:
		//	Print | TimedInstruction | Grab | Release | Function | Call | If;
		@Override public ParserRule getRule() { return rule; }
		
		//Print | TimedInstruction | Grab | Release | Function | Call | If
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Print
		public RuleCall getPrintParserRuleCall_0() { return cPrintParserRuleCall_0; }
		
		//TimedInstruction
		public RuleCall getTimedInstructionParserRuleCall_1() { return cTimedInstructionParserRuleCall_1; }
		
		//Grab
		public RuleCall getGrabParserRuleCall_2() { return cGrabParserRuleCall_2; }
		
		//Release
		public RuleCall getReleaseParserRuleCall_3() { return cReleaseParserRuleCall_3; }
		
		//Function
		public RuleCall getFunctionParserRuleCall_4() { return cFunctionParserRuleCall_4; }
		
		//Call
		public RuleCall getCallParserRuleCall_5() { return cCallParserRuleCall_5; }
		
		//If
		public RuleCall getIfParserRuleCall_6() { return cIfParserRuleCall_6; }
	}
	public class InstructionBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.robotproject.xtextdsl.MyDsl.InstructionBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInstructionBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cInstructionsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cInstructionsInstructionParserRuleCall_2_0_0 = (RuleCall)cInstructionsAssignment_2_0.eContents().get(0);
		private final Assignment cInstructionsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInstructionsInstructionParserRuleCall_2_1_0 = (RuleCall)cInstructionsAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//InstructionBlock:
		//	{InstructionBlock} '{' (instructions+=Instruction instructions+=Instruction*)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{InstructionBlock} '{' (instructions+=Instruction instructions+=Instruction*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{InstructionBlock}
		public Action getInstructionBlockAction_0() { return cInstructionBlockAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(instructions+=Instruction instructions+=Instruction*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//instructions+=Instruction
		public Assignment getInstructionsAssignment_2_0() { return cInstructionsAssignment_2_0; }
		
		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_2_0_0() { return cInstructionsInstructionParserRuleCall_2_0_0; }
		
		//instructions+=Instruction*
		public Assignment getInstructionsAssignment_2_1() { return cInstructionsAssignment_2_1; }
		
		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_2_1_0() { return cInstructionsInstructionParserRuleCall_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.robotproject.xtextdsl.MyDsl.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cInstructionBlockAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInstructionBlockInstructionBlockParserRuleCall_2_0 = (RuleCall)cInstructionBlockAssignment_2.eContents().get(0);
		
		//Function:
		//	'function' name=EString
		//	instructionBlock=InstructionBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//'function' name=EString instructionBlock=InstructionBlock
		public Group getGroup() { return cGroup; }
		
		//'function'
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//instructionBlock=InstructionBlock
		public Assignment getInstructionBlockAssignment_2() { return cInstructionBlockAssignment_2; }
		
		//InstructionBlock
		public RuleCall getInstructionBlockInstructionBlockParserRuleCall_2_0() { return cInstructionBlockInstructionBlockParserRuleCall_2_0; }
	}
	public class IfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.robotproject.xtextdsl.MyDsl.If");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIfAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionConditionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Assignment cTrueBlockAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTrueBlockInstructionBlockParserRuleCall_3_0 = (RuleCall)cTrueBlockAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cElseKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cFalseBlockAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cFalseBlockInstructionBlockParserRuleCall_4_1_0 = (RuleCall)cFalseBlockAssignment_4_1.eContents().get(0);
		
		//If:
		//	{If} 'if' condition=Condition?
		//	trueBlock=InstructionBlock ('else' falseBlock=InstructionBlock)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{If} 'if' condition=Condition? trueBlock=InstructionBlock ('else' falseBlock=InstructionBlock)?
		public Group getGroup() { return cGroup; }
		
		//{If}
		public Action getIfAction_0() { return cIfAction_0; }
		
		//'if'
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }
		
		//condition=Condition?
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_2_0() { return cConditionConditionParserRuleCall_2_0; }
		
		//trueBlock=InstructionBlock
		public Assignment getTrueBlockAssignment_3() { return cTrueBlockAssignment_3; }
		
		//InstructionBlock
		public RuleCall getTrueBlockInstructionBlockParserRuleCall_3_0() { return cTrueBlockInstructionBlockParserRuleCall_3_0; }
		
		//('else' falseBlock=InstructionBlock)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'else'
		public Keyword getElseKeyword_4_0() { return cElseKeyword_4_0; }
		
		//falseBlock=InstructionBlock
		public Assignment getFalseBlockAssignment_4_1() { return cFalseBlockAssignment_4_1; }
		
		//InstructionBlock
		public RuleCall getFalseBlockInstructionBlockParserRuleCall_4_1_0() { return cFalseBlockInstructionBlockParserRuleCall_4_1_0; }
	}
	public class ReleaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.robotproject.xtextdsl.MyDsl.Release");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReleaseAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReleaseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Release:
		//	{Release}
		//	'release';
		@Override public ParserRule getRule() { return rule; }
		
		//{Release} 'release'
		public Group getGroup() { return cGroup; }
		
		//{Release}
		public Action getReleaseAction_0() { return cReleaseAction_0; }
		
		//'release'
		public Keyword getReleaseKeyword_1() { return cReleaseKeyword_1; }
	}
	public class GrabElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.robotproject.xtextdsl.MyDsl.Grab");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGrabAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGrabKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Grab:
		//	{Grab}
		//	'grab';
		@Override public ParserRule getRule() { return rule; }
		
		//{Grab} 'grab'
		public Group getGroup() { return cGroup; }
		
		//{Grab}
		public Action getGrabAction_0() { return cGrabAction_0; }
		
		//'grab'
		public Keyword getGrabKeyword_1() { return cGrabKeyword_1; }
	}
	public class TimedInstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.robotproject.xtextdsl.MyDsl.TimedInstruction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMoveStraightParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTurnParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cWaitParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//TimedInstruction:
		//	MoveStraight | Turn | Wait;
		@Override public ParserRule getRule() { return rule; }
		
		//MoveStraight | Turn | Wait
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MoveStraight
		public RuleCall getMoveStraightParserRuleCall_0() { return cMoveStraightParserRuleCall_0; }
		
		//Turn
		public RuleCall getTurnParserRuleCall_1() { return cTurnParserRuleCall_1; }
		
		//Wait
		public RuleCall getWaitParserRuleCall_2() { return cWaitParserRuleCall_2; }
	}
	public class MoveStraightElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.robotproject.xtextdsl.MyDsl.MoveStraight");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMoveStraightKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDistanceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDistanceDistanceParserRuleCall_1_0 = (RuleCall)cDistanceAssignment_1.eContents().get(0);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDurationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDurationDurationParserRuleCall_3_0 = (RuleCall)cDurationAssignment_3.eContents().get(0);
		
		//MoveStraight:
		//	'moveStraight' distance=Distance 'in' duration=Duration?;
		@Override public ParserRule getRule() { return rule; }
		
		//'moveStraight' distance=Distance 'in' duration=Duration?
		public Group getGroup() { return cGroup; }
		
		//'moveStraight'
		public Keyword getMoveStraightKeyword_0() { return cMoveStraightKeyword_0; }
		
		//distance=Distance
		public Assignment getDistanceAssignment_1() { return cDistanceAssignment_1; }
		
		//Distance
		public RuleCall getDistanceDistanceParserRuleCall_1_0() { return cDistanceDistanceParserRuleCall_1_0; }
		
		//'in'
		public Keyword getInKeyword_2() { return cInKeyword_2; }
		
		//duration=Duration?
		public Assignment getDurationAssignment_3() { return cDurationAssignment_3; }
		
		//Duration
		public RuleCall getDurationDurationParserRuleCall_3_0() { return cDurationDurationParserRuleCall_3_0; }
	}
	public class WaitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.robotproject.xtextdsl.MyDsl.Wait");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWaitAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWaitKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cForKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDurationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDurationDurationParserRuleCall_3_0 = (RuleCall)cDurationAssignment_3.eContents().get(0);
		
		//Wait:
		//	{Wait}
		//	'wait' 'for' duration=Duration?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Wait} 'wait' 'for' duration=Duration?
		public Group getGroup() { return cGroup; }
		
		//{Wait}
		public Action getWaitAction_0() { return cWaitAction_0; }
		
		//'wait'
		public Keyword getWaitKeyword_1() { return cWaitKeyword_1; }
		
		//'for'
		public Keyword getForKeyword_2() { return cForKeyword_2; }
		
		//duration=Duration?
		public Assignment getDurationAssignment_3() { return cDurationAssignment_3; }
		
		//Duration
		public RuleCall getDurationDurationParserRuleCall_3_0() { return cDurationDurationParserRuleCall_3_0; }
	}
	public class TurnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.robotproject.xtextdsl.MyDsl.Turn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTurnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAngleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAngleAngleParserRuleCall_1_0 = (RuleCall)cAngleAssignment_1.eContents().get(0);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDurationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDurationDurationParserRuleCall_3_0 = (RuleCall)cDurationAssignment_3.eContents().get(0);
		
		//Turn:
		//	'turn' angle=Angle 'in' duration=Duration?;
		@Override public ParserRule getRule() { return rule; }
		
		//'turn' angle=Angle 'in' duration=Duration?
		public Group getGroup() { return cGroup; }
		
		//'turn'
		public Keyword getTurnKeyword_0() { return cTurnKeyword_0; }
		
		//angle=Angle
		public Assignment getAngleAssignment_1() { return cAngleAssignment_1; }
		
		//Angle
		public RuleCall getAngleAngleParserRuleCall_1_0() { return cAngleAngleParserRuleCall_1_0; }
		
		//'in'
		public Keyword getInKeyword_2() { return cInKeyword_2; }
		
		//duration=Duration?
		public Assignment getDurationAssignment_3() { return cDurationAssignment_3; }
		
		//Duration
		public RuleCall getDurationDurationParserRuleCall_3_0() { return cDurationDurationParserRuleCall_3_0; }
	}
	public class DistanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.robotproject.xtextdsl.MyDsl.Distance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueEIntParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cDistanceUnitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDistanceUnitDistanceUnitEnumRuleCall_1_0 = (RuleCall)cDistanceUnitAssignment_1.eContents().get(0);
		
		//Distance:
		//	value=EInt distanceUnit=DistanceUnit;
		@Override public ParserRule getRule() { return rule; }
		
		//value=EInt distanceUnit=DistanceUnit
		public Group getGroup() { return cGroup; }
		
		//value=EInt
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//EInt
		public RuleCall getValueEIntParserRuleCall_0_0() { return cValueEIntParserRuleCall_0_0; }
		
		//distanceUnit=DistanceUnit
		public Assignment getDistanceUnitAssignment_1() { return cDistanceUnitAssignment_1; }
		
		//DistanceUnit
		public RuleCall getDistanceUnitDistanceUnitEnumRuleCall_1_0() { return cDistanceUnitDistanceUnitEnumRuleCall_1_0; }
	}
	public class AngleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.robotproject.xtextdsl.MyDsl.Angle");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cValueAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cValueEIntParserRuleCall_0_0_0 = (RuleCall)cValueAssignment_0_0.eContents().get(0);
		private final Assignment cAngleUnitAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cAngleUnitAngleUnitEnumRuleCall_0_1_0 = (RuleCall)cAngleUnitAssignment_0_1.eContents().get(0);
		private final RuleCall cHomeDirectionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Angle:
		//	value=EInt angleUnit=AngleUnit? | HomeDirection;
		@Override public ParserRule getRule() { return rule; }
		
		//value=EInt angleUnit=AngleUnit? | HomeDirection
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//value=EInt angleUnit=AngleUnit?
		public Group getGroup_0() { return cGroup_0; }
		
		//value=EInt
		public Assignment getValueAssignment_0_0() { return cValueAssignment_0_0; }
		
		//EInt
		public RuleCall getValueEIntParserRuleCall_0_0_0() { return cValueEIntParserRuleCall_0_0_0; }
		
		//angleUnit=AngleUnit?
		public Assignment getAngleUnitAssignment_0_1() { return cAngleUnitAssignment_0_1; }
		
		//AngleUnit
		public RuleCall getAngleUnitAngleUnitEnumRuleCall_0_1_0() { return cAngleUnitAngleUnitEnumRuleCall_0_1_0; }
		
		//HomeDirection
		public RuleCall getHomeDirectionParserRuleCall_1() { return cHomeDirectionParserRuleCall_1; }
	}
	public class HomeDirectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.robotproject.xtextdsl.MyDsl.HomeDirection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cHomeDirectionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cHomeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//HomeDirection:
		//	{HomeDirection} "home";
		@Override public ParserRule getRule() { return rule; }
		
		//{HomeDirection} "home"
		public Group getGroup() { return cGroup; }
		
		//{HomeDirection}
		public Action getHomeDirectionAction_0() { return cHomeDirectionAction_0; }
		
		//"home"
		public Keyword getHomeKeyword_1() { return cHomeKeyword_1; }
	}
	public class DurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.robotproject.xtextdsl.MyDsl.Duration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueEIntParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cTimeUnitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTimeUnitTimeUnitEnumRuleCall_1_0 = (RuleCall)cTimeUnitAssignment_1.eContents().get(0);
		
		//Duration:
		//	value=EInt timeUnit=TimeUnit;
		@Override public ParserRule getRule() { return rule; }
		
		//value=EInt timeUnit=TimeUnit
		public Group getGroup() { return cGroup; }
		
		//value=EInt
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//EInt
		public RuleCall getValueEIntParserRuleCall_0_0() { return cValueEIntParserRuleCall_0_0; }
		
		//timeUnit=TimeUnit
		public Assignment getTimeUnitAssignment_1() { return cTimeUnitAssignment_1; }
		
		//TimeUnit
		public RuleCall getTimeUnitTimeUnitEnumRuleCall_1_0() { return cTimeUnitTimeUnitEnumRuleCall_1_0; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.robotproject.xtextdsl.MyDsl.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt ecore::EInt:
		//	'-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class CallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.robotproject.xtextdsl.MyDsl.Call");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCallKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDestinationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cDestinationFunctionCrossReference_1_0 = (CrossReference)cDestinationAssignment_1.eContents().get(0);
		private final RuleCall cDestinationFunctionEStringParserRuleCall_1_0_1 = (RuleCall)cDestinationFunctionCrossReference_1_0.eContents().get(1);
		
		//Call:
		//	'call' destination=[Function|EString];
		@Override public ParserRule getRule() { return rule; }
		
		//'call' destination=[Function|EString]
		public Group getGroup() { return cGroup; }
		
		//'call'
		public Keyword getCallKeyword_0() { return cCallKeyword_0; }
		
		//destination=[Function|EString]
		public Assignment getDestinationAssignment_1() { return cDestinationAssignment_1; }
		
		//[Function|EString]
		public CrossReference getDestinationFunctionCrossReference_1_0() { return cDestinationFunctionCrossReference_1_0; }
		
		//EString
		public RuleCall getDestinationFunctionEStringParserRuleCall_1_0_1() { return cDestinationFunctionEStringParserRuleCall_1_0_1; }
	}
	public class PrintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.robotproject.xtextdsl.MyDsl.Print");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrintAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPrintKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStringAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStringSTRINGTerminalRuleCall_2_0 = (RuleCall)cStringAssignment_2.eContents().get(0);
		
		//Print:
		//	{Print} 'print' string=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//{Print} 'print' string=STRING
		public Group getGroup() { return cGroup; }
		
		//{Print}
		public Action getPrintAction_0() { return cPrintAction_0; }
		
		//'print'
		public Keyword getPrintKeyword_1() { return cPrintKeyword_1; }
		
		//string=STRING
		public Assignment getStringAssignment_2() { return cStringAssignment_2; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_2_0() { return cStringSTRINGTerminalRuleCall_2_0; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.robotproject.xtextdsl.MyDsl.Condition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSensorActivationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDetectedObjectIsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Condition:
		//	SensorActivation | DetectedObjectIs;
		@Override public ParserRule getRule() { return rule; }
		
		//SensorActivation | DetectedObjectIs
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SensorActivation
		public RuleCall getSensorActivationParserRuleCall_0() { return cSensorActivationParserRuleCall_0; }
		
		//DetectedObjectIs
		public RuleCall getDetectedObjectIsParserRuleCall_1() { return cDetectedObjectIsParserRuleCall_1; }
	}
	public class DetectedObjectIsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.robotproject.xtextdsl.MyDsl.DetectedObjectIs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDetectedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cIsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightOperandAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightOperandDetectedTypeEnumRuleCall_2_0 = (RuleCall)cRightOperandAssignment_2.eContents().get(0);
		
		//DetectedObjectIs:
		//	"detected" "is" rightOperand=DetectedType;
		@Override public ParserRule getRule() { return rule; }
		
		//"detected" "is" rightOperand=DetectedType
		public Group getGroup() { return cGroup; }
		
		//"detected"
		public Keyword getDetectedKeyword_0() { return cDetectedKeyword_0; }
		
		//"is"
		public Keyword getIsKeyword_1() { return cIsKeyword_1; }
		
		//rightOperand=DetectedType
		public Assignment getRightOperandAssignment_2() { return cRightOperandAssignment_2; }
		
		//DetectedType
		public RuleCall getRightOperandDetectedTypeEnumRuleCall_2_0() { return cRightOperandDetectedTypeEnumRuleCall_2_0; }
	}
	public class SensorActivationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.robotproject.xtextdsl.MyDsl.SensorActivation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSensorActivationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSensorActivatedKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//SensorActivation:
		//	{SensorActivation}
		//	'sensorActivated';
		@Override public ParserRule getRule() { return rule; }
		
		//{SensorActivation} 'sensorActivated'
		public Group getGroup() { return cGroup; }
		
		//{SensorActivation}
		public Action getSensorActivationAction_0() { return cSensorActivationAction_0; }
		
		//'sensorActivated'
		public Keyword getSensorActivatedKeyword_1() { return cSensorActivatedKeyword_1; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.robotproject.xtextdsl.MyDsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	
	public class TimeUnitElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.robotproject.xtextdsl.MyDsl.TimeUnit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMILLISECONDSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMILLISECONDSMsKeyword_0_0 = (Keyword)cMILLISECONDSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSECONDSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSECONDSSKeyword_1_0 = (Keyword)cSECONDSEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum TimeUnit:
		//	MILLISECONDS="ms" | SECONDS="s";
		public EnumRule getRule() { return rule; }
		
		//MILLISECONDS="ms" | SECONDS="s"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MILLISECONDS="ms"
		public EnumLiteralDeclaration getMILLISECONDSEnumLiteralDeclaration_0() { return cMILLISECONDSEnumLiteralDeclaration_0; }
		
		//"ms"
		public Keyword getMILLISECONDSMsKeyword_0_0() { return cMILLISECONDSMsKeyword_0_0; }
		
		//SECONDS="s"
		public EnumLiteralDeclaration getSECONDSEnumLiteralDeclaration_1() { return cSECONDSEnumLiteralDeclaration_1; }
		
		//"s"
		public Keyword getSECONDSSKeyword_1_0() { return cSECONDSSKeyword_1_0; }
	}
	public class DistanceUnitElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.robotproject.xtextdsl.MyDsl.DistanceUnit");
		private final EnumLiteralDeclaration cCENTIMETERSEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cCENTIMETERSCmKeyword_0 = (Keyword)cCENTIMETERSEnumLiteralDeclaration.eContents().get(0);
		
		//enum DistanceUnit:
		//	CENTIMETERS="cm";
		public EnumRule getRule() { return rule; }
		
		//CENTIMETERS="cm"
		public EnumLiteralDeclaration getCENTIMETERSEnumLiteralDeclaration() { return cCENTIMETERSEnumLiteralDeclaration; }
		
		//"cm"
		public Keyword getCENTIMETERSCmKeyword_0() { return cCENTIMETERSCmKeyword_0; }
	}
	public class AngleUnitElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.robotproject.xtextdsl.MyDsl.AngleUnit");
		private final EnumLiteralDeclaration cDEGREESEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cDEGREESDegKeyword_0 = (Keyword)cDEGREESEnumLiteralDeclaration.eContents().get(0);
		
		//enum AngleUnit:
		//	DEGREES="deg";
		public EnumRule getRule() { return rule; }
		
		//DEGREES="deg"
		public EnumLiteralDeclaration getDEGREESEnumLiteralDeclaration() { return cDEGREESEnumLiteralDeclaration; }
		
		//"deg"
		public Keyword getDEGREESDegKeyword_0() { return cDEGREESDegKeyword_0; }
	}
	public class DetectedTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.robotproject.xtextdsl.MyDsl.DetectedType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBALLEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBALLBallKeyword_0_0 = (Keyword)cBALLEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNULLEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNULLNothingKeyword_1_0 = (Keyword)cNULLEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cWALLEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cWALLWallKeyword_2_0 = (Keyword)cWALLEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum DetectedType:
		//	BALL="ball" | NULL="nothing" | WALL="wall";
		public EnumRule getRule() { return rule; }
		
		//BALL="ball" | NULL="nothing" | WALL="wall"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BALL="ball"
		public EnumLiteralDeclaration getBALLEnumLiteralDeclaration_0() { return cBALLEnumLiteralDeclaration_0; }
		
		//"ball"
		public Keyword getBALLBallKeyword_0_0() { return cBALLBallKeyword_0_0; }
		
		//NULL="nothing"
		public EnumLiteralDeclaration getNULLEnumLiteralDeclaration_1() { return cNULLEnumLiteralDeclaration_1; }
		
		//"nothing"
		public Keyword getNULLNothingKeyword_1_0() { return cNULLNothingKeyword_1_0; }
		
		//WALL="wall"
		public EnumLiteralDeclaration getWALLEnumLiteralDeclaration_2() { return cWALLEnumLiteralDeclaration_2; }
		
		//"wall"
		public Keyword getWALLWallKeyword_2_0() { return cWALLWallKeyword_2_0; }
	}
	
	private final RobotElements pRobot;
	private final InstructionElements pInstruction;
	private final InstructionBlockElements pInstructionBlock;
	private final FunctionElements pFunction;
	private final IfElements pIf;
	private final ReleaseElements pRelease;
	private final GrabElements pGrab;
	private final TimedInstructionElements pTimedInstruction;
	private final MoveStraightElements pMoveStraight;
	private final WaitElements pWait;
	private final TurnElements pTurn;
	private final DistanceElements pDistance;
	private final AngleElements pAngle;
	private final HomeDirectionElements pHomeDirection;
	private final DurationElements pDuration;
	private final TimeUnitElements eTimeUnit;
	private final DistanceUnitElements eDistanceUnit;
	private final AngleUnitElements eAngleUnit;
	private final EIntElements pEInt;
	private final CallElements pCall;
	private final PrintElements pPrint;
	private final ConditionElements pCondition;
	private final DetectedObjectIsElements pDetectedObjectIs;
	private final DetectedTypeElements eDetectedType;
	private final SensorActivationElements pSensorActivation;
	private final EStringElements pEString;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRobot = new RobotElements();
		this.pInstruction = new InstructionElements();
		this.pInstructionBlock = new InstructionBlockElements();
		this.pFunction = new FunctionElements();
		this.pIf = new IfElements();
		this.pRelease = new ReleaseElements();
		this.pGrab = new GrabElements();
		this.pTimedInstruction = new TimedInstructionElements();
		this.pMoveStraight = new MoveStraightElements();
		this.pWait = new WaitElements();
		this.pTurn = new TurnElements();
		this.pDistance = new DistanceElements();
		this.pAngle = new AngleElements();
		this.pHomeDirection = new HomeDirectionElements();
		this.pDuration = new DurationElements();
		this.eTimeUnit = new TimeUnitElements();
		this.eDistanceUnit = new DistanceUnitElements();
		this.eAngleUnit = new AngleUnitElements();
		this.pEInt = new EIntElements();
		this.pCall = new CallElements();
		this.pPrint = new PrintElements();
		this.pCondition = new ConditionElements();
		this.pDetectedObjectIs = new DetectedObjectIsElements();
		this.eDetectedType = new DetectedTypeElements();
		this.pSensorActivation = new SensorActivationElements();
		this.pEString = new EStringElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.unice.polytech.robotproject.xtextdsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Robot:
	//	{Robot}
	//	'Robot'
	//	'{' (instructions+=Instruction instructions+=Instruction*)?
	//	'}';
	public RobotElements getRobotAccess() {
		return pRobot;
	}
	
	public ParserRule getRobotRule() {
		return getRobotAccess().getRule();
	}
	
	//Instruction:
	//	Print | TimedInstruction | Grab | Release | Function | Call | If;
	public InstructionElements getInstructionAccess() {
		return pInstruction;
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}
	
	//InstructionBlock:
	//	{InstructionBlock} '{' (instructions+=Instruction instructions+=Instruction*)?
	//	'}';
	public InstructionBlockElements getInstructionBlockAccess() {
		return pInstructionBlock;
	}
	
	public ParserRule getInstructionBlockRule() {
		return getInstructionBlockAccess().getRule();
	}
	
	//Function:
	//	'function' name=EString
	//	instructionBlock=InstructionBlock;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//If:
	//	{If} 'if' condition=Condition?
	//	trueBlock=InstructionBlock ('else' falseBlock=InstructionBlock)?;
	public IfElements getIfAccess() {
		return pIf;
	}
	
	public ParserRule getIfRule() {
		return getIfAccess().getRule();
	}
	
	//Release:
	//	{Release}
	//	'release';
	public ReleaseElements getReleaseAccess() {
		return pRelease;
	}
	
	public ParserRule getReleaseRule() {
		return getReleaseAccess().getRule();
	}
	
	//Grab:
	//	{Grab}
	//	'grab';
	public GrabElements getGrabAccess() {
		return pGrab;
	}
	
	public ParserRule getGrabRule() {
		return getGrabAccess().getRule();
	}
	
	//TimedInstruction:
	//	MoveStraight | Turn | Wait;
	public TimedInstructionElements getTimedInstructionAccess() {
		return pTimedInstruction;
	}
	
	public ParserRule getTimedInstructionRule() {
		return getTimedInstructionAccess().getRule();
	}
	
	//MoveStraight:
	//	'moveStraight' distance=Distance 'in' duration=Duration?;
	public MoveStraightElements getMoveStraightAccess() {
		return pMoveStraight;
	}
	
	public ParserRule getMoveStraightRule() {
		return getMoveStraightAccess().getRule();
	}
	
	//Wait:
	//	{Wait}
	//	'wait' 'for' duration=Duration?;
	public WaitElements getWaitAccess() {
		return pWait;
	}
	
	public ParserRule getWaitRule() {
		return getWaitAccess().getRule();
	}
	
	//Turn:
	//	'turn' angle=Angle 'in' duration=Duration?;
	public TurnElements getTurnAccess() {
		return pTurn;
	}
	
	public ParserRule getTurnRule() {
		return getTurnAccess().getRule();
	}
	
	//Distance:
	//	value=EInt distanceUnit=DistanceUnit;
	public DistanceElements getDistanceAccess() {
		return pDistance;
	}
	
	public ParserRule getDistanceRule() {
		return getDistanceAccess().getRule();
	}
	
	//Angle:
	//	value=EInt angleUnit=AngleUnit? | HomeDirection;
	public AngleElements getAngleAccess() {
		return pAngle;
	}
	
	public ParserRule getAngleRule() {
		return getAngleAccess().getRule();
	}
	
	//HomeDirection:
	//	{HomeDirection} "home";
	public HomeDirectionElements getHomeDirectionAccess() {
		return pHomeDirection;
	}
	
	public ParserRule getHomeDirectionRule() {
		return getHomeDirectionAccess().getRule();
	}
	
	//Duration:
	//	value=EInt timeUnit=TimeUnit;
	public DurationElements getDurationAccess() {
		return pDuration;
	}
	
	public ParserRule getDurationRule() {
		return getDurationAccess().getRule();
	}
	
	//enum TimeUnit:
	//	MILLISECONDS="ms" | SECONDS="s";
	public TimeUnitElements getTimeUnitAccess() {
		return eTimeUnit;
	}
	
	public EnumRule getTimeUnitRule() {
		return getTimeUnitAccess().getRule();
	}
	
	//enum DistanceUnit:
	//	CENTIMETERS="cm";
	public DistanceUnitElements getDistanceUnitAccess() {
		return eDistanceUnit;
	}
	
	public EnumRule getDistanceUnitRule() {
		return getDistanceUnitAccess().getRule();
	}
	
	//enum AngleUnit:
	//	DEGREES="deg";
	public AngleUnitElements getAngleUnitAccess() {
		return eAngleUnit;
	}
	
	public EnumRule getAngleUnitRule() {
		return getAngleUnitAccess().getRule();
	}
	
	//EInt ecore::EInt:
	//	'-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//Call:
	//	'call' destination=[Function|EString];
	public CallElements getCallAccess() {
		return pCall;
	}
	
	public ParserRule getCallRule() {
		return getCallAccess().getRule();
	}
	
	//Print:
	//	{Print} 'print' string=STRING;
	public PrintElements getPrintAccess() {
		return pPrint;
	}
	
	public ParserRule getPrintRule() {
		return getPrintAccess().getRule();
	}
	
	//Condition:
	//	SensorActivation | DetectedObjectIs;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//DetectedObjectIs:
	//	"detected" "is" rightOperand=DetectedType;
	public DetectedObjectIsElements getDetectedObjectIsAccess() {
		return pDetectedObjectIs;
	}
	
	public ParserRule getDetectedObjectIsRule() {
		return getDetectedObjectIsAccess().getRule();
	}
	
	//enum DetectedType:
	//	BALL="ball" | NULL="nothing" | WALL="wall";
	public DetectedTypeElements getDetectedTypeAccess() {
		return eDetectedType;
	}
	
	public EnumRule getDetectedTypeRule() {
		return getDetectedTypeAccess().getRule();
	}
	
	//SensorActivation:
	//	{SensorActivation}
	//	'sensorActivated';
	public SensorActivationElements getSensorActivationAccess() {
		return pSensorActivation;
	}
	
	public ParserRule getSensorActivationRule() {
		return getSensorActivationAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
