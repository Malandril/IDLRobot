/*
 * generated by Xtext 2.14.0
 */
package fr.unice.polytech.robotproject.xtextdsl.serializer;

import com.google.inject.Inject;
import fr.unice.polytech.robotproject.model.RobotProjectModel.Amount;
import fr.unice.polytech.robotproject.model.RobotProjectModel.Duration;
import fr.unice.polytech.robotproject.model.RobotProjectModel.MoveStraight;
import fr.unice.polytech.robotproject.model.RobotProjectModel.Robot;
import fr.unice.polytech.robotproject.model.RobotProjectModel.RobotProjectModelPackage;
import fr.unice.polytech.robotproject.model.RobotProjectModel.Turn;
import fr.unice.polytech.robotproject.xtextdsl.services.MyDSLGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class MyDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == RobotProjectModelPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case RobotProjectModelPackage.AMOUNT:
				sequence_Amount(context, (Amount) semanticObject); 
				return; 
			case RobotProjectModelPackage.DURATION:
				sequence_Duration(context, (Duration) semanticObject); 
				return; 
			case RobotProjectModelPackage.MOVE_STRAIGHT:
				sequence_MoveStraight(context, (MoveStraight) semanticObject); 
				return; 
			case RobotProjectModelPackage.ROBOT:
				sequence_Robot(context, (Robot) semanticObject); 
				return; 
			case RobotProjectModelPackage.TURN:
				sequence_Turn(context, (Turn) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Amount returns Amount
	 *
	 * Constraint:
	 *     value=EInt
	 */
	protected void sequence_Amount(ISerializationContext context, Amount semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RobotProjectModelPackage.Literals.INT_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RobotProjectModelPackage.Literals.INT_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAmountAccess().getValueEIntParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Duration returns Duration
	 *
	 * Constraint:
	 *     value=EInt
	 */
	protected void sequence_Duration(ISerializationContext context, Duration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RobotProjectModelPackage.Literals.DURATION__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RobotProjectModelPackage.Literals.DURATION__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDurationAccess().getValueEIntParserRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Instruction returns MoveStraight
	 *     MoveStraight returns MoveStraight
	 *
	 * Constraint:
	 *     (amount=Amount duration=Duration?)
	 */
	protected void sequence_MoveStraight(ISerializationContext context, MoveStraight semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Robot returns Robot
	 *
	 * Constraint:
	 *     (instructions+=Instruction instructions+=Instruction*)?
	 */
	protected void sequence_Robot(ISerializationContext context, Robot semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Instruction returns Turn
	 *     Turn returns Turn
	 *
	 * Constraint:
	 *     (amount=Amount duration=Duration?)
	 */
	protected void sequence_Turn(ISerializationContext context, Turn semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
