/*
 * generated by Xtext 2.14.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package fr.unice.polytech.robotproject.xtextdsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fr.unice.polytech.robotproject.xtextdsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import fr.unice.polytech.robotproject.xtextdsl.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;

    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Robot";
   	}

   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleRobot
entryRuleRobot returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRobotRule()); }
	iv_ruleRobot=ruleRobot
	{ $current=$iv_ruleRobot.current; }
	EOF;

// Rule Robot
ruleRobot returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getRobotAccess().getRobotAction_0(),
					$current);
			}
		)
		otherlv_1='Robot'
		{
			newLeafNode(otherlv_1, grammarAccess.getRobotAccess().getRobotKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getRobotAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getRobotAccess().getInstructionsInstructionParserRuleCall_3_0_0());
					}
					lv_instructions_3_0=ruleInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRobotRule());
						}
						add(
							$current,
							"instructions",
							lv_instructions_3_0,
							"fr.unice.polytech.robotproject.xtextdsl.MyDsl.Instruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getRobotAccess().getInstructionsInstructionParserRuleCall_3_1_0());
					}
					lv_instructions_4_0=ruleInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRobotRule());
						}
						add(
							$current,
							"instructions",
							lv_instructions_4_0,
							"fr.unice.polytech.robotproject.xtextdsl.MyDsl.Instruction");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getRobotAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleInstruction
entryRuleInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInstructionRule()); }
	iv_ruleInstruction=ruleInstruction
	{ $current=$iv_ruleInstruction.current; }
	EOF;

// Rule Instruction
ruleInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getMovementParserRuleCall_0());
		}
		this_Movement_0=ruleMovement
		{
			$current = $this_Movement_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getNamedBlockParserRuleCall_1());
		}
		this_NamedBlock_1=ruleNamedBlock
		{
			$current = $this_NamedBlock_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getGoToParserRuleCall_2());
		}
		this_GoTo_2=ruleGoTo
		{
			$current = $this_GoTo_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleMovement
entryRuleMovement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMovementRule()); }
	iv_ruleMovement=ruleMovement
	{ $current=$iv_ruleMovement.current; }
	EOF;

// Rule Movement
ruleMovement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getMovementAccess().getMoveStraightParserRuleCall_0_0());
			}
			this_MoveStraight_0=ruleMoveStraight
			{
				$current = $this_MoveStraight_0.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getMovementAccess().getTurnParserRuleCall_0_1());
			}
			this_Turn_1=ruleTurn
			{
				$current = $this_Turn_1.current;
				afterParserOrEnumRuleCall();
			}
		)
		otherlv_2='for'
		{
			newLeafNode(otherlv_2, grammarAccess.getMovementAccess().getForKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMovementAccess().getDurationDurationParserRuleCall_2_0());
				}
				lv_duration_3_0=ruleDuration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMovementRule());
					}
					set(
						$current,
						"duration",
						lv_duration_3_0,
						"fr.unice.polytech.robotproject.xtextdsl.MyDsl.Duration");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleMoveStraight
entryRuleMoveStraight returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMoveStraightRule()); }
	iv_ruleMoveStraight=ruleMoveStraight
	{ $current=$iv_ruleMoveStraight.current; }
	EOF;

// Rule MoveStraight
ruleMoveStraight returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='MoveStraight'
		{
			newLeafNode(otherlv_0, grammarAccess.getMoveStraightAccess().getMoveStraightKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMoveStraightAccess().getDistanceDistanceParserRuleCall_1_0());
				}
				lv_distance_1_0=ruleDistance
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMoveStraightRule());
					}
					set(
						$current,
						"distance",
						lv_distance_1_0,
						"fr.unice.polytech.robotproject.xtextdsl.MyDsl.Distance");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTurn
entryRuleTurn returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTurnRule()); }
	iv_ruleTurn=ruleTurn
	{ $current=$iv_ruleTurn.current; }
	EOF;

// Rule Turn
ruleTurn returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Turn'
		{
			newLeafNode(otherlv_0, grammarAccess.getTurnAccess().getTurnKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTurnAccess().getAngleAngleParserRuleCall_1_0());
				}
				lv_angle_1_0=ruleAngle
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTurnRule());
					}
					set(
						$current,
						"angle",
						lv_angle_1_0,
						"fr.unice.polytech.robotproject.xtextdsl.MyDsl.Angle");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDistance
entryRuleDistance returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDistanceRule()); }
	iv_ruleDistance=ruleDistance
	{ $current=$iv_ruleDistance.current; }
	EOF;

// Rule Distance
ruleDistance returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getDistanceAccess().getValueEIntParserRuleCall_0_0());
				}
				lv_value_0_0=ruleEInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDistanceRule());
					}
					set(
						$current,
						"value",
						lv_value_0_0,
						"fr.unice.polytech.robotproject.xtextdsl.MyDsl.EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getDistanceAccess().getDistanceUnitDistanceUnitEnumRuleCall_1_0());
				}
				lv_distanceUnit_1_0=ruleDistanceUnit
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDistanceRule());
					}
					set(
						$current,
						"distanceUnit",
						lv_distanceUnit_1_0,
						"fr.unice.polytech.robotproject.xtextdsl.MyDsl.DistanceUnit");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAngle
entryRuleAngle returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAngleRule()); }
	iv_ruleAngle=ruleAngle
	{ $current=$iv_ruleAngle.current; }
	EOF;

// Rule Angle
ruleAngle returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAngleAccess().getValueEIntParserRuleCall_0_0());
				}
				lv_value_0_0=ruleEInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAngleRule());
					}
					set(
						$current,
						"value",
						lv_value_0_0,
						"fr.unice.polytech.robotproject.xtextdsl.MyDsl.EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAngleAccess().getAngleUnitAngleUnitEnumRuleCall_1_0());
				}
				lv_angleUnit_1_0=ruleAngleUnit
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAngleRule());
					}
					set(
						$current,
						"angleUnit",
						lv_angleUnit_1_0,
						"fr.unice.polytech.robotproject.xtextdsl.MyDsl.AngleUnit");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleDuration
entryRuleDuration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDurationRule()); }
	iv_ruleDuration=ruleDuration
	{ $current=$iv_ruleDuration.current; }
	EOF;

// Rule Duration
ruleDuration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDurationAccess().getDurationAction_0(),
					$current);
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getDurationAccess().getValueEIntParserRuleCall_1_0_0());
					}
					lv_value_1_0=ruleEInt
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDurationRule());
						}
						set(
							$current,
							"value",
							lv_value_1_0,
							"fr.unice.polytech.robotproject.xtextdsl.MyDsl.EInt");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getDurationAccess().getTimeUnitTimeUnitEnumRuleCall_1_1_0());
					}
					lv_timeUnit_2_0=ruleTimeUnit
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDurationRule());
						}
						set(
							$current,
							"timeUnit",
							lv_timeUnit_2_0,
							"fr.unice.polytech.robotproject.xtextdsl.MyDsl.TimeUnit");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEIntRule()); }
	iv_ruleEInt=ruleEInt
	{ $current=$iv_ruleEInt.current.getText(); }
	EOF;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleNamedBlock
entryRuleNamedBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNamedBlockRule()); }
	iv_ruleNamedBlock=ruleNamedBlock
	{ $current=$iv_ruleNamedBlock.current; }
	EOF;

// Rule NamedBlock
ruleNamedBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getNamedBlockAccess().getNamedBlockAction_0(),
					$current);
			}
		)
		otherlv_1='NamedBlock'
		{
			newLeafNode(otherlv_1, grammarAccess.getNamedBlockAccess().getNamedBlockKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNamedBlockAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNamedBlockRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"fr.unice.polytech.robotproject.xtextdsl.MyDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getNamedBlockAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getNamedBlockAccess().getInstructionsInstructionParserRuleCall_4_0_0());
					}
					lv_instructions_4_0=ruleInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNamedBlockRule());
						}
						add(
							$current,
							"instructions",
							lv_instructions_4_0,
							"fr.unice.polytech.robotproject.xtextdsl.MyDsl.Instruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getNamedBlockAccess().getInstructionsInstructionParserRuleCall_4_1_0());
					}
					lv_instructions_5_0=ruleInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNamedBlockRule());
						}
						add(
							$current,
							"instructions",
							lv_instructions_5_0,
							"fr.unice.polytech.robotproject.xtextdsl.MyDsl.Instruction");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getNamedBlockAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleGoTo
entryRuleGoTo returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGoToRule()); }
	iv_ruleGoTo=ruleGoTo
	{ $current=$iv_ruleGoTo.current; }
	EOF;

// Rule GoTo
ruleGoTo returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='GoTo'
		{
			newLeafNode(otherlv_0, grammarAccess.getGoToAccess().getGoToKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGoToRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getGoToAccess().getDestinationNamedBlockCrossReference_1_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Rule TimeUnit
ruleTimeUnit returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='ms'
			{
				$current = grammarAccess.getTimeUnitAccess().getMILLISECONDSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getTimeUnitAccess().getMILLISECONDSEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='s'
			{
				$current = grammarAccess.getTimeUnitAccess().getSECONDSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getTimeUnitAccess().getSECONDSEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule DistanceUnit
ruleDistanceUnit returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0='cm'
		{
			$current = grammarAccess.getDistanceUnitAccess().getCENTIMETERSEnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getDistanceUnitAccess().getCENTIMETERSEnumLiteralDeclaration());
		}
	)
;

// Rule AngleUnit
ruleAngleUnit returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0='deg'
		{
			$current = grammarAccess.getAngleUnitAccess().getDEGREESEnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getAngleUnitAccess().getDEGREESEnumLiteralDeclaration());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
